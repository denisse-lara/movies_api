FORMAT: 1A
HOST: https://localhost:5001/

# Liked Movies Api

Movie is a simple api allowing consumers to search movies and like them.
Consumers can register a new user and login.
Users with admin authorization can modify movie's information, promote/demote other users, and ban/unban users.

## Auth Collection [/auth]

### Login [GET /auth/login]

+ Request

    + Headers
    
            Authentication: Basic 

+ Response 200 (application/json)

            {
                "token": "header.payload.signature"
            }

+ Response 401 (application/json)

            {
                "description": "Basic realm='Provide valid credentials",
                "message": "Invalid authorization request",
                "status_code": 401
            }

+ Response 403 (application/json)

            {
                "description": "Your account has been banned by an admin",
                "message": "User is banned from access",
                "status_code": 403
            }

### Register [GET /auth/register]

+ Request (application/json)

    + Headers
    
            Authentication: Basic 

    + Body

            {
                "username": "created_with_admin",
                "password": "password",
                "display_name": "Display Name",
            }
            
+ Response 201 (application/json)

            {
                "message": "User created",
                "user": {
                    "display_name": "Normal User",
                    "public_id": "e18bdd1d-fe99-49a0-82b9-49180bd43504",
                    "username": "normal_user"
                }
            }

+ Response 500 (application/json)

            {
                "message": "User with username already exists",
                "status_code": 500
            }

### Logout [GET /auth/logout]

+ Request

    + Headers
    
            Authentication: Basic 

+ Response 200 (application/json)

            {
                "message": "User logged out",
                "status_code": 200
            }


## Users Collection [/users]

### Display User Information [GET /users/1]

A user can fetch its own profile information. Users with admin authorization can
fetch any user's information.

+ Request

    + Headers
    
            Authentication: Bearer Token

+ Response 200 (application/json)

            {
                "display_name": "Display Name",
                "public_id": "45e8c566-96eb-4ded-b16e-5dcb70f23f8a",
                "username": "username"
            }

### List of Liked Movies [GET /users/1/movies]

List of movies liked by the logged user.

+ Request

    + Headers
    
            Authentication: Bearer Token

+ Response 200 (application/json)

            [
                {
                    "public_id": "45e8c566-96eb-4ded-b16e-5dcb70f23f8a",
                    "title": "Movie title",
                    "release_date": "2015-08-05",
                    "poster_img_url": "https://i.imgur.com/a5MK3cu.jpeg",
                    "likes": 20
                }
            ]

## Movies Collection [/movies]

### List All Movies [GET]

List of all the registered movies.

+ Response 200 (application/json)

            [
                {
                    "public_id": "45e8c566-96eb-4ded-b16e-5dcb70f23f8a",
                    "title": "Movie title",
                    "release_date": "2015-08-05",
                    "poster_img_url": "https://i.imgur.com/a5MK3cu.jpeg",
                    "likes": 20
                }
            ]

### Like a Movie [PUT /movies/1/like]

A user may like a specific movie once.

+ Request

    + Headers
    
            Authentication: Bearer Token


+ Response 200 (application/json)


    + Body

            {
                "message": "Movie 'Movie title' liked.",
                "movie": {
                    "public_id": "45e8c566-96eb-4ded-b16e-5dcb70f23f8a",
                    "title": "Movie title",
                    "likes": 20
                }
            }

### Unlike a Movie [PUT /movies/1/unlike]

A user may unlike a liked movie.

+ Request

    + Headers
    
            Authentication: Bearer Token


+ Response 200 (application/json)

    + Body

            {
                "message": "Movie 'Movie title' unliked.",
                "movie": {
                    "public_id": "45e8c566-96eb-4ded-b16e-5dcb70f23f8a",
                    "title": "Movie title",
                    "likes": 19
                }
            }

## Admin Collection [/admin]

This collection can only be accessed by an authorized admin.

### List All Users [GET /admin/users]

List of all the registered users.

+ Request

    + Headers
    
            Authentication: Bearer Token

+ Response 200 (application/json)

            [
                {
                    "admin": false,
                    "banned": false,
                    "display_name": "Normal User",
                    "public_id": "5d11aab5-90f0-424b-a5ab-591cc13805ed",
                    "username": "username"
                }
            ]

### Promote a User [PUT /admin/users/1/promote]

Promote a user to admin.

+ Request

    + Headers
    
            Authentication: Bearer Token


+ Response 200 (application/json)

    + Body

            {
                "message": "User 'username' promoted to admin",
                "user": {
                    "admin": true,
                    "banned": false,
                    "display_name": "Normal User",
                    "public_id": "5d11aab5-90f0-424b-a5ab-591cc13805ed",
                    "username": "username"
                }
            }

+ Response 404 (application/json)

    + Body

            {
                "message": "User not found",
                "status_code": 404
            }


### Demote a User [PUT /admin/users/1/demote]

Demote a user to normal.

+ Request

    + Headers
    
            Authentication: Bearer Token


+ Response 200 (application/json)

    + Body

            {
                "message": "User 'username' demoted to normal",
                "user": {
                    "admin": false,
                    "banned": false,
                    "display_name": "Normal User",
                    "public_id": "5d11aab5-90f0-424b-a5ab-591cc13805ed",
                    "username": "username"
                }
            }

+ Response 404 (application/json)

    + Body

            {
                "message": "User not found",
                "status_code": 404
            }


### Ban a User [PUT /admin/users/1/ban]

Ban a user from logging in.

+ Request

    + Headers
    
            Authentication: Bearer Token


+ Response 200 (application/json)

    + Body

            {
                "message": "User 'username' banned",
                "user": {
                    "admin": false,
                    "banned": true,
                    "display_name": "Normal User",
                    "public_id": "5d11aab5-90f0-424b-a5ab-591cc13805ed",
                    "username": "username"
                }
            }

+ Response 404 (application/json)

    + Body

            {
                "message": "User not found",
                "status_code": 404
            }

### Unban a User [PUT /admin/users/1/unban]

Unban a user from logging in.

+ Request

    + Headers
    
            Authentication: Bearer Token


+ Response 200 (application/json)

    + Body

            {
                "message": "User 'username' banned",
                "user": {
                    "admin": false,
                    "banned": false,
                    "display_name": "Normal User",
                    "public_id": "5d11aab5-90f0-424b-a5ab-591cc13805ed",
                    "username": "username"
                }
            }

+ Response 404 (application/json)

    + Body

            {
                "message": "User not found",
                "status_code": 404
            }

### Delete a User [DELETE /admin/users/1]

Unban a user from logging in.

+ Request

    + Headers
    
            Authentication: Bearer Token


+ Response 200 (application/json)

    + Body

            {
                "message": "User 'username' deleted"
            }

+ Response 404 (application/json)

    + Body

            {
                "message": "User not found",
                "status_code": 404
            }