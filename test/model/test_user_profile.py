import unittest
import sqlalchemy.exc
import uuid

from test.base_test import BaseTest
from api.model.user_profile import UserProfile


class TestUserProfileUnit(unittest.TestCase):
    def setUp(self) -> None:
        self.user = UserProfile(
            username="admin_username",
            password="12345",
            name="Admin",
        )

    def test_str(self):
        """
        UserProfile.__str__ returns appropriate string.
        """
        str_user = str(self.user)
        self.assertIn("admin_username", str_user, "String doesn't include the username")
        self.assertIn("admin", str_user, "String doesn't include the admin flag")

    def test_repr(self):
        """
        UserProfile.__repr__ returns appropriate representation
        """
        repr_user = repr(self.user)
        self.assertEqual(
            "UserProfile(username='admin_username', password='12345', name='Admin')",
            repr_user,
        )


class TestUserProfileInt(BaseTest):
    def test_user_profile_defaults(self):
        """
        Can store a user in the db.
        """
        user = UserProfile(
            username="admin_username",
            password="12345",
            name="Admin",
        )

        with self.app.app_context():
            self.db.session.add(user)
            self.db.session.commit()

            created_user = UserProfile.query.first()
            self.assertEqual(
                False, created_user.admin, "UserProfile.admin should default to False"
            )
            self.assertEqual(
                False, created_user.banned, "UserProfile.banned should default to False"
            )

    def test_username_unique(self):
        """
        Username must be unique for each UserProfile
        """
        with self.app.app_context():
            self.db.session.add(
                UserProfile(username="admin_username", password="12345")
            )
            self.db.session.add(
                UserProfile(username="admin_username", password="12345")
            )
            self.assertRaises(sqlalchemy.exc.IntegrityError, self.db.session.commit)

    def test_password_hashed(self):
        """
        UserProfile.password is hashed before inserting
        """
        user = UserProfile(
            username="admin_username",
            password="12345",
            name="Admin",
        )

        with self.app.app_context():
            self.db.session.add(user)
            self.db.session.commit()

            created_user = UserProfile.query.first()
            self.assertNotEqual(
                "12345",
                created_user.password,
                "UserProfile.password should be hashed before inserting",
            )

    def test_autogenerated_public_id(self):
        """
        UserProfile.public_id is autogenerated before insert
        """
        user = UserProfile(
            username="admin_username",
            password="12345",
            name="Admin",
        )

        with self.app.app_context():
            self.db.session.add(user)
            self.db.session.commit()

            created_user = UserProfile.query.first()
            self.assertIsNot(
                None, created_user.public_id, "UserProfile.public_id cannot be None"
            )
            try:
                uuid.UUID(created_user.public_id, version=4)
            except ValueError:
                self.fail("UserProfile.public_id must be a valid uuid4 string")
